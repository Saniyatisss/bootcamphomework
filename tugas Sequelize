Soal:

1. Buatlah script untuk menyimpan 5 data users sekaligus.

2. Buatlah script untuk menghitung jumlah data yang ada di table users.

3. Buatlah script untuk membuat pagination data users dengan menampilkan 2 data di
setiap page-nya.

4. Buatlah table profile yang berelasi dengan table users, isi table profile dengan attribut alamat, nomorHp.

Jawabannya:

1.
 const sequelize = new Sequelize('database', 'username', 'password', {
  host: 'localhost',
  dialect: 'mysql',
});

const User = sequelize.define('User', {
  username: {
    type: DataTypes.STRING,
    allowNull: false
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  age: {
    type: DataTypes.INTEGER
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  course: {
    type: DataTypes.STRING,
    allowNull: false,
  }
 
});

(async () => {
  try {
    await sequelize.sync({ force: true });

    const userData = [
      { username: 'Jane', email: 'jane@example.com', age: 23, password: 'whosthis?', course: 'basketball' },
      { username: 'Dani', email: 'dani@example.com', age: 27, password: 'yesplease?', course: 'baseball' },
      { username: 'Ally', email: 'ally@example.com', age: 30, password: 'askawayplease', course: 'swimming' },
      { username: 'Tia', email: 'tia@example.com', age: 31, password: 'typethepassword', course: 'programming' },
      { username: 'Anna', email: 'anna@example.com', age: 29, password: 'askawayplease', course: 'programming' },
    ];

    await User.bulkCreate(userData);

    console.log('Users created successfully!');
  } catch (error) {
    console.error('Error occurred:', error);
  } finally {
    await sequelize.close();
  }
})();

2.

  const getUsernames = async params => {
  const { count, rows: username } = await Username.findAndCountAll({
    where: {
      gender: 'female',
    },
    limit: DEFAULT_PAGE_SIZE,
    order: [['id', 'ASC']],
    ...params,
  });

  return { count, usernames };
}

3.
const express = require("express");
const sequelize = require('./database');
const User = require('./User');

sequelize.sync({ force: true }).then(async () => {
  for(let i = 1; i <= 10; i++){
    const user = {
      username: `user${i}`,
      email: `user${i}@mail.com`,
      password: 'P4ssword'
    }
    await User.create(user);
  }
});

const app = express();

app.use(express.json());

app.post('/users', async (req, res) => {
  await User.create(req.body);
  res.send("success");
})

app.get('/users', async (req, res) => {
  const pageAsNumber = Number.parseInt(req.query.page);
  const sizeAsNumber = Number.parseInt(req.query.size);

  let page = 0;
  if(!Number.isNaN(pageAsNumber) && pageAsNumber > 0){
    page = pageAsNumber;
  }

  let size = 10;
  if(!Number.isNaN(sizeAsNumber) && !(sizeAsNumber > 10) && !(sizeAsNumber < 1)){
    size = sizeAsNumber;
  }

  const usersWithCount = await User.findAndCountAll({
    limit: 1,
    offset: 2,
  });
  res.send({
    content: usersWithCount.rows,
    totalPages: Math.ceil(usersWithCount.count / Number.parseInt(size))
  });
})

app.get('/users/:id', async (req, res) => {
  const id = req.params.id;
  const user = await User.findOne({where: {id: id}});
  res.send(user);
})

app.put('/users/:id', async (req, res) => {
  const id = req.params.id;
  const user = await User.findOne({where: {id: id}});
  user.username = req.body.username;
  await user.save();
  res.send('updated');
})

app.delete('/users/:id', async (req, res) => {
  const id = req.params.id;
  await User.destroy({where: {id: id}});
  res.send('removed');
})

app.listen(3000, () => {
  console.log("app is running");
});

4.
const Sequelize = require('sequelize');
const sequelize = new Sequelize('database', 'username', 'password', {
  host: 'localhost',
  dialect: 'mysql',
});

const Users = sequelize.define('users', {
  username: Sequelize.STRING,
  email: Sequelize.STRING
});

const Profile = sequelize.define('profile', {
  alamat: Sequelize.STRING,
  nomorHp: Sequelize.STRING
});

Users.hasOne(Profile); // Satu user memiliki satu profile
Profile.belongsTo(Users); // Setiap profile berhubungan dengan satu user

sequelize.sync()
  .then(() => {
    console.log('Tabel berhasil dibuat');
  })
  .catch(err => {
    console.error('Gagal membuat tabel:', err);
  });

